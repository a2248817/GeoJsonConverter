@using Syncfusion.Blazor.CircularGauge.Internal;
<svg version="1.1"
     xmlns="http://www.w3.org/2000/svg"
     width="@($"{Width}%")"
     height="@($"{Height}%")"
     class="@CssClass">

     <SvgElement ElementType="@SvgElement.SvgElementType.Circle"></SvgElement>
    @for (double y = 1; y <= RowCount; y++)
    {
        @for (double x = 1; x <= ColumnCount; x++)
        {
            var X = Padding + ColumnGap * x;
            var Y = Padding + RowGap * y;

            <Circle X="@X" Y="@Y" OnClick="@Select"></Circle>
        }
    }

</svg>

@code {
    [Parameter]
    public string CssClass { get; set; } = string.Empty;
    [Parameter]
    public double Width { get; set; } = 100;
    [Parameter]
    public double Height { get; set; } = 100;
    [Parameter]
    public double Padding { get; set; } = 0;

    private int _rowCount = 1;
    [Parameter]
    public int RowCount
    {
        get { return _rowCount; }
        set
        {
            if (value > MaxRowCount) return;
            _rowCount = value;
            RowGap = ((Height - 2 * Padding) / (RowCount + 1));
        }
    }

    private int _columnCount = 1;
    [Parameter]
    public int ColumnCount
    {
        get { return _columnCount; }
        set
        {
            if (value > MaxColumnCount) return;
            _columnCount = value;
            ColumnGap = ((Width - 2 * Padding) / (ColumnCount + 1));
        }
    }

    [Parameter]
    public int MaxRowCount { get; set; } = 50;
    [Parameter]
    public int MaxColumnCount { get; set; } = 50;

    public double RowGap { get; private set; }
    public double ColumnGap { get; private set; }

    public List<Circle> SelectedCircles { get; set; } = new();

    public void CreateGrid(int rowCount, int columnCount)
    {
        RowCount = rowCount;
        ColumnCount = columnCount;
        StateHasChanged();
    }

    public void ResetGrid()
    {
        RowCount = 0;
        ColumnCount = 0;
        StateHasChanged();
    }

    public void Select(object sender, MouseEventArgs args)
    {
        var circle = (Circle)sender;
        circle.Select();
        if (SelectedCircles.Contains(circle) == true)
        {
            SelectedCircles.Remove(circle);
        }
        else
        {
            SelectedCircles.Add(circle);
        }
        StateHasChanged();
    }
}
