@page "/"

@using GeoJSON.Text;
@using GeoJsonHelper.Extensions;
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@using GeoJSON.Text.Feature;
@using GeoJSON.Text.Geometry;
@using Syncfusion.Blazor.Maps;
@using Syncfusion.Blazor.Inputs;

@inject IWebHostEnvironment _webHostEnvironment


<div class="container-fluid">
    <div class="row">


        <div class="col-10 my-2">


            <SfMaps @ref=@SfMaps Height="900">
                <MapsZoomSettings Enable=true DoubleClickZoom=true></MapsZoomSettings>
                <MapsEvents OnItemSelect=@OnItemSelectEvent></MapsEvents>
                <MapsLayers>
                    <MapsLayer @ref=@MapsLayer
                               TValue="string"
                               Visible=true
                               GeometryType="GeometryType.Normal">
                        <MapsLayerSelectionSettings Enable="true" Fill="green" EnableMultiSelect=true>
                            <MapsLayerSelectionBorder Color="White" Width="2"></MapsLayerSelectionBorder>
                        </MapsLayerSelectionSettings>
                    </MapsLayer>
                </MapsLayers>
            </SfMaps>

        </div>



        <div class="col-2">

            <div>
                <SfButton OnClick="CreateGrid" Content="CreateGrid" CssClass="w-100 my-1"></SfButton>
            </div>
            <div>
                <SfButton OnClick="CreateRectangle" Content="CreateRectangle" CssClass="w-100 my-1"></SfButton>
            </div>
            <div>
                <SfButton Content="CreatePolygon" OnClick="CreatePolygon" CssClass="w-100 my-1"></SfButton>
            </div>
            <div>
                <SfButton OnClick="DownloadFile" Content="DownloadFile" CssClass="w-100 my-1"></SfButton>
            </div>
            <div>
                <SfButton OnClick="DeleteFiles" Content="DeleteFiles" CssClass="w-100 my-1"></SfButton>
            </div>

            <SfNumericTextBox @bind-Value="@X"
                              Placeholder="X"
                              Min="1"
                              Max="50"
                              TValue="int"></SfNumericTextBox>
            <SfNumericTextBox @bind-Value="@Y"
                              Placeholder="Y"
                              Min="1"
                              Max="50"
                              TValue="int"></SfNumericTextBox>

            <h1>X: @X, Y: @Y</h1>

            <h1>
                Selected Points
            </h1>

            @if (SelectedPoints is not null)
            {
                <div>
                    @foreach (var point in SelectedPoints)
                    {
                        <span>Id: @point.Id</span>
                        <br />
                        <span>Type: @point.Geometry.Type</span>
                    }
                </div>
            }

        </div>

    </div>

</div>


@code {
    public FeatureCollection? FeatureCollection { get; set; } = null;
    public string GeoJson { get; set; } = string.Empty;


    public int X { get; set; }
    public int Y { get; set; }

    private SfMaps? SfMaps { get; set; }
    private MapsLayer<string>? MapsLayer { get; set; }



    public void CreateGrid()
    {
        FeatureCollection = GeoJsonHelper.CreatePoints(X, Y).ToFeatures().ToFeatureCollection();
        MapsLayer.ShapeData = FeatureCollection;
    }

    public void CreateRectangle()
    {
        FeatureCollection = GeoJsonHelper.CreateRectangle(X, Y).ToFeatureCollection();
        MapsLayer.ShapeData = FeatureCollection;
    }

    public async Task DownloadFile()
    {
        var filePath = $"./Data/Test/{DateTime.Now.ToString("yyyy_MM_dd&HH_mm_ss.FFF&zz")}&{X}_{Y}.geojson";
        await GeoJsonHelper.ToGeoJsonFileAsync((FeatureCollection)MapsLayer.ShapeData, filePath);
    }

    public void DeleteFiles()
    {
        var path = $"./Data/Test";
        var directoryInfo = new DirectoryInfo(path);
        var files = directoryInfo.GetFiles();
        foreach (var file in files)
        {
            file.Delete();
        }
    }

    public List<Feature> SelectedPoints { get; set; } = new();
    public void OnItemSelectEvent(SelectionEventArgs args)
    {
        var guid = args.ShapeData["guid"];
        var Point = FeatureCollection.Features.Find(f => f.Id == guid);
        if (SelectedPoints.Contains(Point) == false)
        {
            SelectedPoints.Add(Point);
        }
        else
        {
            SelectedPoints.Remove(Point);
        }
    }

    public void CreatePolygon()
    {
        SelectedPoints.ForEach(p => FeatureCollection.Features.Remove(p));
        var points = SelectedPoints.Select(f => (Point)f.Geometry);
        var polygon = GeoJsonHelper.CreatePolygonFromPoints(points).ToFeature();

        FeatureCollection = FeatureCollection.AddFeature(polygon);
        MapsLayer.ShapeData = FeatureCollection;

        SelectedPoints.ForEach(async p => await SfMaps.ShapeSelectionAsync(0, "guid", p.Id, false));
        SelectedPoints.Clear();

    }
}