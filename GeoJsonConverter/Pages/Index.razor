@page "/"

@using GeoJSON.Text;
@using GeoJsonHelper.Extensions;
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@using GeoJSON.Text.Feature;
@using GeoJSON.Text.Geometry;
@using Syncfusion.Blazor.Maps;
@using Syncfusion.Blazor.Inputs;

@inject IWebHostEnvironment _webHostEnvironment


<SfButton OnClick="CreateGrid" Content="CreateGrid"></SfButton>
<SfButton OnClick="CreateRectangle" Content="CreateRectangle"></SfButton>
<SfButton OnClick="DownloadFile" Content="DownloadFile"></SfButton>
<SfButton OnClick="DeleteFiles" Content="DeleteFiles"></SfButton>

<SfMaps @ref=@SfMaps EnablePersistence=false>
    <MapsEvents OnItemSelect="@OnItemSelectEvent"></MapsEvents>
    <MapsLayers>
        <MapsLayer @ref=@MapsLayer
                   TValue="string"
                   Visible=true
                   GeometryType="GeometryType.Normal">
                <MapsLayerSelectionSettings Enable="true" Fill="green" EnableMultiSelect=true>
                    <MapsLayerSelectionBorder Color="White" Width="2"></MapsLayerSelectionBorder>
                </MapsLayerSelectionSettings>
        </MapsLayer>
    </MapsLayers>
</SfMaps>

<SfNumericTextBox @bind-Value="@X"
                  Placeholder="X"
                  Min="1"
                  Max="50"
                  TValue="int"></SfNumericTextBox>
<SfNumericTextBox @bind-Value="@Y"
                  Placeholder="Y"
                  Min="1"
                  Max="50"
                  TValue="int"></SfNumericTextBox>

<h1>X: @X, Y: @Y</h1>

<SfButton Content="CreateLineString" OnClick="CreateLineString"></SfButton>
<SfButton Content="CreatePolygon" OnClick="CreatePolygon"></SfButton>
<SfButton Content="PopPoint" OnClick="PopPoint"></SfButton>
<SfButton Content="Refresh" OnClick="Refresh"></SfButton>


@if (SelectedPoints is not null)
{
    <div>
        @foreach (var point in SelectedPoints)
        {
            <span>Id: @point.Id</span>
            <span>Type: @point.Geometry.Type</span>
            <br />
        }
    </div>
}

@code {
    public FeatureCollection? FeatureCollection { get; set; } = null;
    public string GeoJson { get; set; } = string.Empty;


    public int X { get; set; }
    public int Y { get; set; }

    private SfMaps? SfMaps { get; set; }
    private MapsLayer<string>? MapsLayer { get; set; }

    public void CreateGrid()
    {
        FeatureCollection = GeoJsonHelper.CreatePoints(X, Y);
        MapsLayer.ShapeData = FeatureCollection;
    }

    public void CreateRectangle()
    {
        FeatureCollection = new(new List<Feature> { GeoJsonHelper.CreateRectangle(X, Y) });
        MapsLayer.ShapeData = FeatureCollection;
    }

    public async Task DownloadFile()
    {
        var filePath = $"./Data/Test/{X}_{Y}&{DateTime.Now.ToString("yyyy_MM_dd&HH_mm_ss.FFF&zz")}.json";
        await GeoJsonHelper.ToGeoJsonFileAsync((FeatureCollection)MapsLayer.ShapeData, filePath);
    }

    public void DeleteFiles()
    {
        var path = $"./Data/Test";
        var directoryInfo = new DirectoryInfo(path);
        var files = directoryInfo.GetFiles();
        foreach (var file in files)
        {
            file.Delete();
        }
    }

    public List<Feature> SelectedPoints { get; set; } = new();
    public void OnItemSelectEvent(SelectionEventArgs args)
    {
        var guid = args.ShapeData["guid"];
        var Point = FeatureCollection.Features.Find(f => f.Id == guid);
        if (SelectedPoints.Contains(Point) == false)
        {
            SelectedPoints.Add(Point);
        }
        else
        {
            SelectedPoints.Remove(Point);
        }
    }

    public void CreateLineString()
    {
        SelectedPoints.ForEach(p => FeatureCollection.Features.Remove(p));
        var points = SelectedPoints.Select(f => (Point)f.Geometry);
        var lineString = GeoJsonHelper.CreateLineStringFromPoints(points).ToFeature();
        FeatureCollection.Features.Add(lineString);

        MapsLayer.ShapeData = GeoJsonHelper.CreatePoints(0, 0);
        SfMaps.Refresh();
        MapsLayer.ShapeData = FeatureCollection;
        SfMaps.Refresh();

        SelectedPoints.Clear();
        SelectedPoints.ForEach(async p => await SfMaps.ShapeSelectionAsync(0, "guid", p.Id, false));
    }

    public void CreatePolygon()
    {
        SelectedPoints.ForEach(p => FeatureCollection.Features.Remove(p));
        var points = SelectedPoints.Select(f => (Point)f.Geometry);
        var polygon = GeoJsonHelper.CreatePolygonFromPoints(points).ToFeature();
        FeatureCollection.Features.Add(polygon);

        MapsLayer.ShapeData = GeoJsonHelper.CreatePoints(0, 0);
        SfMaps.Refresh();
        MapsLayer.ShapeData = FeatureCollection;
        SfMaps.Refresh();

        SelectedPoints.Clear();
        SelectedPoints.ForEach(async p => await SfMaps.ShapeSelectionAsync(0, "guid", p.Id, false));

    }

    public void Refresh()
    {
        //MapsLayer<string> mapsLayer = new();
        //mapsLayer.Visible = true;
        //mapsLayer.GeometryType = GeometryType.Normal;
        //mapsLayer.ShapeData = FeatureCollection;
        //MapsLayer = mapsLayer;
        //MapsLayer.ShapeData = null;
        //MapsLayer.ShapeData = FeatureCollection;
        //SfMaps.Refresh();
        //StateHasChanged();
    }

    public void PopPoint()
    {
        
    }
}